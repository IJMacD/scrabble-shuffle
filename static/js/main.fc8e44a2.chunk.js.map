{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","rand1","setRand1","rand2","setRand2","useRand1","setUseRand1","useRand2","setUseRand2","useTwoShuffleRow","setUseTwoShuffleRow","useTwoShuffleCol","setUseTwoShuffleCol","useRowSwap","setUseRowSwap","useColSwap","setUseColSwap","tiles","digits","tmp","split","i","col","range","map","j","join","shiftTiles","shunt","getDigits","out","push","substr","shuffle","rows","twoShuffleRow","cols","splitCols","combineCols","twoShuffleCol","n","Error","rowSwap","c","colSwap","className","type","checked","onChange","value","e","target","onClick","Math","random","toString","key","Array","_","floor","toFixed","repeat","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fc8e44a2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst TILES = \"AAAAAAAAABBCCDDDDEEEEEEEEEEEEFFGGGHHIIIIIIIIIJKLLLLMMNNNNNNOOOOOOOOPPQRRRRRRSSSSTTTTTTUUUUVVWWXYYZ  \";\n\nfunction App() {\n  const [ rand1, setRand1 ] = React.useState(\"0.2460931405\");\n  const [ rand2, setRand2 ] = React.useState(\"0.7451811228\");\n\n  const [ useRand1, setUseRand1 ]= React.useState(true);\n  const [ useRand2, setUseRand2 ]= React.useState(true);\n  const [ useTwoShuffleRow, setUseTwoShuffleRow ]= React.useState(true);\n  const [ useTwoShuffleCol, setUseTwoShuffleCol ]= React.useState(true);\n  const [ useRowSwap, setUseRowSwap ]= React.useState(false);\n  const [ useColSwap, setUseColSwap ]= React.useState(false);\n\n  let tiles = TILES;\n\n  if (useRand1) {\n    tiles = shunt(tiles, getDigits(+rand1));\n  }\n\n  if (useRand2) {\n    tiles = shuffle(tiles, getDigits(+rand2));\n  }\n\n  if (useTwoShuffleRow) {\n    tiles = twoShuffleRow(tiles);\n  }\n\n  if (useTwoShuffleCol) {\n    tiles = twoShuffleCol(tiles);\n  }\n\n  if (useRowSwap) {\n    tiles = rowSwap(tiles, 2);\n  }\n\n  if (useColSwap) {\n    tiles = colSwap(tiles, 2);\n  }\n\n  return (\n    <div className=\"App\">\n      <label>\n        <input type=\"checkbox\" checked={useRand1} onChange={() => setUseRand1(!useRand1)} />\n        <span>Random 1 (Column)</span>\n        <input type=\"text\" value={rand1} onChange={e => setRand1(e.target.value)} />\n        <button onClick={() => setRand1(Math.random().toString())}>Random</button>\n      </label>\n      <label>\n        <input type=\"checkbox\" checked={useRand2} onChange={() => setUseRand2(!useRand2)} />\n        <span>Random 2 (Row)</span>\n        <input type=\"text\" value={rand2} onChange={e => setRand2(e.target.value)} />\n        <button onClick={() => setRand2(Math.random().toString())}>Random</button>\n      </label>\n      <label>\n        <input type=\"checkbox\" checked={useTwoShuffleRow} onChange={() => setUseTwoShuffleRow(!useTwoShuffleRow)} />\n        Perform Two Shuffle (Row)\n      </label>\n      <label>\n        <input type=\"checkbox\" checked={useTwoShuffleCol} onChange={() => setUseTwoShuffleCol(!useTwoShuffleCol)} />\n        Perform Two Shuffle (Col)\n      </label>\n      <label>\n        <input type=\"checkbox\" checked={useRowSwap} onChange={() => setUseRowSwap(!useRowSwap)} />\n        Perform Two Swap (Row)\n      </label>\n      <label>\n        <input type=\"checkbox\" checked={useColSwap} onChange={() => setUseColSwap(!useColSwap)} />\n        Perform Two Swap (Column)\n      </label>\n      <table>\n        <tbody>\n        {\n          range(10).map(i => (\n            <tr key={i}>\n              {\n                range(10).map(j => (\n                  <td key={j}>{tiles[i*10+j]}</td>\n                ))\n              }\n            </tr>\n          ))\n        }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction range (n) {\n  return [ ...Array(n) ].map((_,i) => i);\n}\n\n/**\n * \n * @param {number} n \n * @returns {string}\n */\nfunction getDigits (n) {\n  const rem = n - Math.floor(n);\n  return rem.toFixed(10).substr(2);\n}\n\n/**\n * \n * @param {string} tiles \n * @param {string} digits \n * @returns {string}\n */\nfunction shunt (tiles, digits) {\n  const tmp = tiles.split(\"\");\n  for (let i = 0; i < 10; i++) {\n    let col = range(10).map(j => tiles[j * 10 + i]).join(\"\");\n    col = shiftTiles(col, +digits[i]);\n    for (let j = 0; j < 10; j++) {\n      tmp[j * 10 + i] = col[j];\n    }\n  } \n  return tmp.join(\"\");\n}\n\n/**\n * \n * @param {string} tiles \n * @param {string} digits \n * @returns {string}\n */\nfunction shuffle (tiles, digits) {\n  const out = [];\n\n  for (let i = 0; i < 10; i++) {\n    out.push(shiftTiles(tiles.substr(i * 10, 10), +digits[i]));\n  }\n\n  return out.join(\"\");\n}\n\n/**\n * \n * @param {string} tiles 10 tiles\n * @param {number} n \n * @returns {string}\n */\nfunction shiftTiles (tiles, n) {\n  return tiles.repeat(2).substr(10 - n, 10);\n}\n\nfunction twoShuffleRow (tiles) {\n  const rows = range(10).map(i => tiles.substr(i * 10, 10));\n  const out = [\n    rows[9],\n    rows[7],\n    rows[5],\n    rows[3],\n    rows[1],\n    rows[0],\n    rows[2],\n    rows[4],\n    rows[6],\n    rows[8],\n  ];\n  return out.join(\"\");\n}\n\nfunction twoShuffleCol (tiles) {\n  const cols = splitCols(tiles);\n  const out = [\n    cols[9],\n    cols[7],\n    cols[5],\n    cols[3],\n    cols[1],\n    cols[0],\n    cols[2],\n    cols[4],\n    cols[6],\n    cols[8],\n  ];\n  return combineCols(out);\n}\n\nfunction rowSwap (tiles, n) {\n  if (n !== 2) {\n    throw Error(\"Swap of anything other than 2 has not been implemented.\");\n  }\n  const rows = range(10).map(i => tiles.substr(i * 10, 10));\n  const out = [];\n  for (let i = 0; i < 5; i++) {\n    out.push(rows[i*n+1]);\n    out.push(rows[i*n]);\n  }\n  return out.join(\"\");\n}\n\nfunction colSwap (tiles, n) {\n  if (n !== 2) {\n    throw Error(\"Swap of anything other than 2 has not been implemented.\");\n  }\n  const tmp = tiles.split(\"\");\n  for (let i = 0; i < 50; i++) {\n    const c = tmp[i*n+1];\n    tmp[i*n+1] = tmp[i*n];\n    tmp[i*n] = c;\n  }\n  return tmp.join(\"\");\n}\n\nfunction splitCols (tiles) {\n  return range(10).map(i => (\n    range(10).map(j => tiles[j * 10 + i]).join(\"\")\n  ));\n}\n\nfunction combineCols (cols) {\n  const out = [];\n  for (let i = 0; i < 10; i++) {\n    out.push(cols.map(col => col[i]).join(\"\"));\n  }\n  return out.join(\"\");\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}